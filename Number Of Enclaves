class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        
        direction=[(1,0),(0,1),(-1,0),(0,-1)]
        mycountarr=[]
        self.count=0
        inbound= lambda a,b: 0<=a<len(grid) and 0<=b<len(grid[0])
        def dfs(i,j):
            for k in direction:
                    if not inbound(i+k[0],j+k[1]):
                        self.boundStatus=False
            for k in direction:
                        if inbound(i+k[0],j+k[1]) and grid[i+k[0]][j+k[1]]==1:
                            grid[i+k[0]][j+k[1]]=0
                            self.count+=1
                            dfs(i+k[0],j+k[1])
            
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                self.boundStatus=True
                if grid[i][j]==1:
                    grid[i][j]=0
                    self.count+=1
                    dfs(i,j)
                    if self.boundStatus:
                        mycountarr.append(self.count)
                    self.count=0
        
        if len(mycountarr)==0:
            return 0
        else:
            return sum(mycountarr)
        

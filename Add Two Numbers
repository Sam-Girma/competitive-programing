# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        tore = ListNode()
        tore.next = ListNode()
        head = tore.next
        
        cam = 0
        while(l1 and l2):
            
            head.val=(cam + (l1.val+l2.val))%10
            if l1.next != None and l2.next!=None:
                head.next = ListNode()
                head = head.next
            
            cam = (cam + (l1.val+l2.val))//10
            l1=l1.next
            l2=l2.next
        
        
        if l1 or l2:
            head.next = ListNode()
            head = head.next
        while(l1):
            head.val = ((l1.val + cam)%10)
            if l1.next:
                head.next = ListNode()
                head= head.next
           
            cam= (l1.val + cam)//10
            l1= l1.next
        while(l2):
            head.val = (l2.val + cam)%10
            if l2.next:
                head.next = ListNode()
                head = head.next
            cam= (l2.val + cam)//10
            l2 = l2.next
            
        if l1==None and l2==None:
            if cam==1:
                head.next = ListNode(1)
        if head.val == 0:
            head = None
        return tore.next
        
